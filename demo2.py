from flask import Flask, request, jsonify
import requests
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

app = Flask(__name__)

# Th√¥ng tin bot Telegram
BOT1_TOKEN = "8082939784:AAEDPeIDJN7VL3RT9D2UhMHfGP2P0n9hwHE"
BOT2_TOKEN = "7875194079:AAFcRGt2FN8ahpn1O-TY3rpS5fs3UF94dWA"
CHAT_ID = "-4775219722"

TRADINGVIEW_URL = "https://www.tradingview.com/chart/"  # Thay ƒë·ªïi link n·∫øu c·∫ßn

def send_telegram_message(bot_token, chat_id, message, image_path=None):
    """G·ª≠i tin nh·∫Øn v√† ·∫£nh (n·∫øu c√≥) ƒë·∫øn Telegram"""
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {"chat_id": chat_id, "text": message, "parse_mode": "Markdown"}
    requests.post(url, json=payload)

    if image_path:
        url_photo = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
        with open(image_path, "rb") as photo:
            requests.post(url_photo, data={"chat_id": chat_id}, files={"photo": photo})

def capture_chart(url, save_path="chart.png"):
    """D√πng Selenium ch·ª•p ·∫£nh m√†n h√¨nh TradingView"""
    try:
        options = webdriver.ChromeOptions()
        options.add_argument("--headless")
        options.add_argument("--disable-gpu")
        options.add_argument("--no-sandbox")  # Quan tr·ªçng khi ch·∫°y tr√™n Render
        options.add_argument("--disable-dev-shm-usage")  # Gi√∫p tr√°nh l·ªói b·ªô nh·ªõ
        options.add_argument("--window-size=1920x1080")

        # ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n Chrome n·∫øu m√¥i tr∆∞·ªùng kh√¥ng t·ª± ƒë·ªông nh·∫≠n di·ªán
        chrome_path = "/usr/bin/google-chrome"
        if os.path.exists(chrome_path):
            options.binary_location = chrome_path

        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        driver.get(url)
        time.sleep(3)  # ƒê·ª£i TradingView load

        driver.save_screenshot(save_path)
        driver.quit()
        return save_path
    except Exception as e:
        print(f"‚ùå L·ªói ch·ª•p m√†n h√¨nh: {e}")
        return None

@app.route("/", methods=["HEAD", "GET"])
def keep_alive():
    """ƒê·ªÉ Render kh√¥ng b·ªã sleep"""
    print("üü¢ UptimeRobot ping received! Keeping Render alive...")
    return "", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    """Nh·∫≠n alert t·ª´ TradingView, x·ª≠ l√Ω v√† g·ª≠i tin nh·∫Øn + ·∫£nh ƒë·∫øn Telegram"""
    print(f"üì• Headers: {request.headers}")
    print(f"üì• Raw data: {request.data}")

    try:
        alert_message = request.data.decode("utf-8").strip()
        if not alert_message:
            print("‚ö†Ô∏è Kh√¥ng c√≥ tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c!")
            return jsonify({"error": "Kh√¥ng c√≥ tin nh·∫Øn"}), 400

        print(f"üì• Processed Message: {alert_message}")

        # Ch·ª•p m√†n h√¨nh TradingView
        image_path = capture_chart(TRADINGVIEW_URL)

        if "Long" in alert_message:
            print(f"üöÄ G·ª≠i t√≠n hi·ªáu LONG b·∫±ng BOT1")
            send_telegram_message(BOT1_TOKEN, CHAT_ID, alert_message, image_path)

        if "Short" in alert_message:
            print(f"üìâ G·ª≠i t√≠n hi·ªáu SHORT b·∫±ng BOT2")
            send_telegram_message(BOT2_TOKEN, CHAT_ID, alert_message, image_path)

    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω webhook: {e}")
        return jsonify({"error": str(e)}), 500

    return jsonify({"status": "ok"})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
