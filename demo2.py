from flask import Flask, request, jsonify
import requests
from urllib.parse import urlparse, parse_qs

app = Flask(__name__)

# Th√¥ng tin bot Telegram
BOT1_TOKEN = "8082939784:AAEDPeIDJN7VL3RT9D2UhMHfGP2P0n9hwHE"
BOT2_TOKEN = "7875194079:AAFcRGt2FN8ahpn1O-TY3rpS5fs3UF94dWA"
CHAT_ID = "-4775219722"

# API Key c·ªßa APIFlash (thay b·∫±ng key th·∫≠t c·ªßa b·∫°n)
APIFLASH_API_KEY = "314801dee3834f189467fee984cba673"

# H√†m g·ª≠i ·∫£nh qua Telegram
def send_telegram_photo(bot_token, chat_id, photo_url, caption):
    url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
    payload = {"chat_id": chat_id, "photo": photo_url, "caption": caption}
    response = requests.post(url, json=payload)
    if response.status_code != 200:
        print(f"‚ùå Error sending photo: {response.text}")

# H√†m g·ª≠i tin nh·∫Øn vƒÉn b·∫£n qua Telegram (d·ª± ph√≤ng n·∫øu kh√¥ng ch·ª•p ƒë∆∞·ª£c ·∫£nh)
def send_telegram_message(bot_token, chat_id, message):
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {"chat_id": chat_id, "text": message, "parse_mode": "Markdown"}
    requests.post(url, json=payload)

@app.route("/", methods=["HEAD", "GET"])
def keep_alive():
    print("üü¢ UptimeRobot ping received! Keeping Render alive...")
    return "", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    print(f"üì• Headers: {request.headers}")
    print(f"üì• Raw data: {request.data}")

    try:
        alert_message = request.data.decode("utf-8").strip()
        if not alert_message:
            print("‚ö†Ô∏è No message received!")
            return jsonify({"error": "No message received"}), 400

        print(f"üì• Processed Message: {alert_message}")

        # Gi·∫£ s·ª≠ alert g·ª≠i theo ƒë·ªãnh d·∫°ng:
        # "Signal: Long\nChart URL: https://www.tradingview.com/chart/?symbol=AUDCHF"
        lines = alert_message.split("\n")
        signal = lines[0].split(": ")[1].strip()  # "Long" ho·∫∑c "Short"
        original_chart_url = lines[1].split(": ")[1].strip()  # URL ban ƒë·∫ßu

        # Tr√≠ch xu·∫•t c·∫∑p ti·ªÅn t·ª´ URL ban ƒë·∫ßu
        parsed_url = urlparse(original_chart_url)
        qs = parse_qs(parsed_url.query)
        symbol = qs.get('symbol', [''])[0]
        if not symbol:
            print("‚ö†Ô∏è Symbol not found in the URL!")
            symbol = "Unknown"

        # T·∫°o URL chart m·ªõi v·ªõi khung th·ªùi gian c·ªë ƒë·ªãnh l√† 1 ph√∫t
        new_chart_url = f"https://www.tradingview.com/chart/?symbol={symbol}&interval=15"

        # T·∫°o caption ch·ªâ ch·ª©a th√¥ng tin c·∫∑p ti·ªÅn v√† t√≠n hi·ªáu
        alert_caption = f"Signal: {signal}\nPair: {symbol}"

        # Th√™m c√°c tham s·ªë wait v√† user_agent ƒë·ªÉ TradingView render chart ƒë√∫ng 1 ph√∫t
        user_agent = ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                      "AppleWebKit/537.36 (KHTML, like Gecko) "
                      "Chrome/112.0.0.0 Safari/537.36")
        apiflash_url = (
            f"https://api.apiflash.com/v1/urltoimage?"
            f"access_key={APIFLASH_API_KEY}"
            f"&url={new_chart_url}"
            f"&format=png&width=1280&height=720"
            f"&wait=5000"  # ch·ªù 5 gi√¢y ƒë·ªÉ trang load ƒë·∫ßy ƒë·ªß
            f"&user_agent={user_agent}"
        )

        response = requests.get(apiflash_url)
        if response.status_code == 200:
            photo_url = response.url  # URL ·∫£nh ch·ª•p ƒë∆∞·ª£c t·ª´ APIFlash
            print(f"‚úÖ Screenshot captured: {photo_url}")
        else:
            photo_url = None
            print(f"‚ùå Error capturing screenshot: {response.status_code} - {response.text}")

        # G·ª≠i t√≠n hi·ªáu Long qua BOT1
        if "Long" in signal:
            print("üöÄ Sending LONG signal via BOT1")
            if photo_url:
                send_telegram_photo(BOT1_TOKEN, CHAT_ID, photo_url, alert_caption)
            else:
                send_telegram_message(BOT1_TOKEN, CHAT_ID, f"{alert_caption}\n(·∫¢nh kh√¥ng ch·ª•p ƒë∆∞·ª£c)")

        # G·ª≠i t√≠n hi·ªáu Short qua BOT2
        if "Short" in signal:
            print("üìâ Sending SHORT signal via BOT2")
            if photo_url:
                send_telegram_photo(BOT2_TOKEN, CHAT_ID, photo_url, alert_caption)
            else:
                send_telegram_message(BOT2_TOKEN, CHAT_ID, f"{alert_caption}\n(·∫¢nh kh√¥ng ch·ª•p ƒë∆∞·ª£c)")

    except Exception as e:
        print(f"‚ùå Error processing webhook: {e}")
        return jsonify({"error": str(e)}), 500

    return jsonify({"status": "ok"})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)






# from flask import Flask, request, jsonify
# import requests

# app = Flask(__name__)

# # Th√¥ng tin bot Telegram
# BOT1_TOKEN = "8082939784:AAEDPeIDJN7VL3RT9D2UhMHfGP2P0n9hwHE"
# BOT2_TOKEN = "7875194079:AAFcRGt2FN8ahpn1O-TY3rpS5fs3UF94dWA"
# CHAT_ID = "-4775219722"

# # API Key c·ªßa APIFlash (thay b·∫±ng key th·∫≠t c·ªßa b·∫°n)
# APIFLASH_API_KEY = "314801dee3834f189467fee984cba673"

# # H√†m g·ª≠i ·∫£nh qua Telegram
# def send_telegram_photo(bot_token, chat_id, photo_url, caption):
#     url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
#     payload = {"chat_id": chat_id, "photo": photo_url, "caption": caption}
#     response = requests.post(url, json=payload)
#     if response.status_code != 200:
#         print(f"‚ùå Error sending photo: {response.text}")

# # H√†m g·ª≠i tin nh·∫Øn vƒÉn b·∫£n qua Telegram (d·ª± ph√≤ng n·∫øu kh√¥ng ch·ª•p ƒë∆∞·ª£c ·∫£nh)
# def send_telegram_message(bot_token, chat_id, message):
#     url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
#     payload = {"chat_id": chat_id, "text": message, "parse_mode": "Markdown"}
#     requests.post(url, json=payload)

# @app.route("/", methods=["HEAD", "GET"])
# def keep_alive():
#     print("üü¢ UptimeRobot ping received! Keeping Render alive...")
#     return "", 200

# @app.route("/webhook", methods=["POST"])
# def webhook():
#     print(f"üì• Headers: {request.headers}")
#     print(f"üì• Raw data: {request.data}")

#     try:
#         alert_message = request.data.decode("utf-8").strip()
#         if not alert_message:
#             print("‚ö†Ô∏è No message received!")
#             return jsonify({"error": "No message received"}), 400

#         print(f"üì• Processed Message: {alert_message}")

#         # Ph√¢n t√≠ch th√¥ng ƒëi·ªáp alert
#         lines = alert_message.split("\n")
#         signal = lines[0].split(": ")[1]  # "Long" ho·∫∑c "Short"
#         chart_url = lines[1].split(": ")[1]  # URL bi·ªÉu ƒë·ªì

#         # Ch·ª•p ·∫£nh bi·ªÉu ƒë·ªì b·∫±ng APIFlash
#         apiflash_url = f"https://api.apiflash.com/v1/urltoimage?access_key={APIFLASH_API_KEY}&url={chart_url}&format=png&width=1280&height=720"
#         response = requests.get(apiflash_url)
#         if response.status_code == 200:
#             photo_url = response.url  # URL ·∫£nh t·ª´ APIFlash
#             print(f"‚úÖ Screenshot captured: {photo_url}")
#         else:
#             photo_url = None
#             print(f"‚ùå Error capturing screenshot: {response.status_code} - {response.text}")

#         # G·ª≠i t√≠n hi·ªáu Long qua BOT1
#         if "Long" in signal:
#             print(f"üöÄ Sending LONG signal via BOT1")
#             if photo_url:
#                 send_telegram_photo(BOT1_TOKEN, CHAT_ID, photo_url, alert_message)
#             else:
#                 send_telegram_message(BOT1_TOKEN, CHAT_ID, f"{alert_message}\n(·∫¢nh kh√¥ng ch·ª•p ƒë∆∞·ª£c)")

#         # G·ª≠i t√≠n hi·ªáu Short qua BOT2
#         if "Short" in signal:
#             print(f"üìâ Sending SHORT signal via BOT2")
#             if photo_url:
#                 send_telegram_photo(BOT2_TOKEN, CHAT_ID, photo_url, alert_message)
#             else:
#                 send_telegram_message(BOT2_TOKEN, CHAT_ID, f"{alert_message}\n(·∫¢nh kh√¥ng ch·ª•p ƒë∆∞·ª£c)")

#     except Exception as e:
#         print(f"‚ùå Error processing webhook: {e}")
#         return jsonify({"error": str(e)}), 500

#     return jsonify({"status": "ok"})

# if __name__ == "__main__":
#     app.run(host="0.0.0.0", port=5000)
